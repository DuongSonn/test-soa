// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "sondth-test_soa/app/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IProductHelper is an autogenerated mock type for the IProductHelper type
type IProductHelper struct {
	mock.Mock
}

// ValidateProductID provides a mock function with given fields: ctx, productID
func (_m *IProductHelper) ValidateProductID(ctx context.Context, productID uuid.UUID) (*entity.Product, error) {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateProductID")
	}

	var r0 *entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Product, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Product); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIProductHelper creates a new instance of IProductHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductHelper {
	mock := &IProductHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
