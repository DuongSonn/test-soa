// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IUserHelper is an autogenerated mock type for the IUserHelper type
type IUserHelper struct {
	mock.Mock
}

// IsValidPermission provides a mock function with given fields: ctx, userID
func (_m *IUserHelper) IsValidPermission(ctx context.Context, userID uuid.UUID) bool {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsValidPermission")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsValidRole provides a mock function with given fields: role
func (_m *IUserHelper) IsValidRole(role string) bool {
	ret := _m.Called(role)

	if len(ret) == 0 {
		panic("no return value specified for IsValidRole")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(role)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewIUserHelper creates a new instance of IUserHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserHelper {
	mock := &IUserHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
