// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	entity "sondth-test_soa/app/entity"

	jwt "github.com/golang-jwt/jwt/v5"

	mock "github.com/stretchr/testify/mock"

	model "sondth-test_soa/app/model"
)

// IOAuthHelper is an autogenerated mock type for the IOAuthHelper type
type IOAuthHelper struct {
	mock.Mock
}

// GenerateAccessToken provides a mock function with given fields: user
func (_m *IOAuthHelper) GenerateAccessToken(user entity.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(entity.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateRefreshToken provides a mock function with given fields: user
func (_m *IOAuthHelper) GenerateRefreshToken(user entity.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(entity.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateToken provides a mock function with given fields: claims, key
func (_m *IOAuthHelper) GenerateToken(claims jwt.Claims, key string) (string, error) {
	ret := _m.Called(claims, key)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(jwt.Claims, string) (string, error)); ok {
		return rf(claims, key)
	}
	if rf, ok := ret.Get(0).(func(jwt.Claims, string) string); ok {
		r0 = rf(claims, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(jwt.Claims, string) error); ok {
		r1 = rf(claims, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyAccessToken provides a mock function with given fields: tokenString
func (_m *IOAuthHelper) VerifyAccessToken(tokenString string) (*model.UserJWTPayload, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAccessToken")
	}

	var r0 *model.UserJWTPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.UserJWTPayload, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *model.UserJWTPayload); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserJWTPayload)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyRefreshToken provides a mock function with given fields: tokenString
func (_m *IOAuthHelper) VerifyRefreshToken(tokenString string) (*model.UserJWTPayload, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for VerifyRefreshToken")
	}

	var r0 *model.UserJWTPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.UserJWTPayload, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *model.UserJWTPayload); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserJWTPayload)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: tokenString, key
func (_m *IOAuthHelper) VerifyToken(tokenString string, key string) (*jwt.Token, error) {
	ret := _m.Called(tokenString, key)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*jwt.Token, error)); ok {
		return rf(tokenString, key)
	}
	if rf, ok := ret.Get(0).(func(string, string) *jwt.Token); ok {
		r0 = rf(tokenString, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tokenString, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOAuthHelper creates a new instance of IOAuthHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOAuthHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOAuthHelper {
	mock := &IOAuthHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
